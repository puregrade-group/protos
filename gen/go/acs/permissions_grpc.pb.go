// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: acs/permissions.proto

package acs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PermissionsClient is the client API for Permissions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionsClient interface {
	Create(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*CreatePermissionResponse, error)
	ReadOwners(ctx context.Context, in *ReadPermissionOwnersRequest, opts ...grpc.CallOption) (*ReadPermissionOwnersResponse, error)
	CheckPermissions(ctx context.Context, in *CheckPermissionsRequest, opts ...grpc.CallOption) (*CheckPermissionsResponse, error)
	Delete(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*DeletePermissionResponse, error)
	Add(ctx context.Context, in *AddPermissionRequest, opts ...grpc.CallOption) (*AddPermissionResponse, error)
	Remove(ctx context.Context, in *RemovePermissionRequest, opts ...grpc.CallOption) (*RemovePermissionResponse, error)
}

type permissionsClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionsClient(cc grpc.ClientConnInterface) PermissionsClient {
	return &permissionsClient{cc}
}

func (c *permissionsClient) Create(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*CreatePermissionResponse, error) {
	out := new(CreatePermissionResponse)
	err := c.cc.Invoke(ctx, "/acs.Permissions/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsClient) ReadOwners(ctx context.Context, in *ReadPermissionOwnersRequest, opts ...grpc.CallOption) (*ReadPermissionOwnersResponse, error) {
	out := new(ReadPermissionOwnersResponse)
	err := c.cc.Invoke(ctx, "/acs.Permissions/ReadOwners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsClient) CheckPermissions(ctx context.Context, in *CheckPermissionsRequest, opts ...grpc.CallOption) (*CheckPermissionsResponse, error) {
	out := new(CheckPermissionsResponse)
	err := c.cc.Invoke(ctx, "/acs.Permissions/CheckPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsClient) Delete(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*DeletePermissionResponse, error) {
	out := new(DeletePermissionResponse)
	err := c.cc.Invoke(ctx, "/acs.Permissions/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsClient) Add(ctx context.Context, in *AddPermissionRequest, opts ...grpc.CallOption) (*AddPermissionResponse, error) {
	out := new(AddPermissionResponse)
	err := c.cc.Invoke(ctx, "/acs.Permissions/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsClient) Remove(ctx context.Context, in *RemovePermissionRequest, opts ...grpc.CallOption) (*RemovePermissionResponse, error) {
	out := new(RemovePermissionResponse)
	err := c.cc.Invoke(ctx, "/acs.Permissions/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionsServer is the server API for Permissions service.
// All implementations must embed UnimplementedPermissionsServer
// for forward compatibility
type PermissionsServer interface {
	Create(context.Context, *CreatePermissionRequest) (*CreatePermissionResponse, error)
	ReadOwners(context.Context, *ReadPermissionOwnersRequest) (*ReadPermissionOwnersResponse, error)
	CheckPermissions(context.Context, *CheckPermissionsRequest) (*CheckPermissionsResponse, error)
	Delete(context.Context, *DeletePermissionRequest) (*DeletePermissionResponse, error)
	Add(context.Context, *AddPermissionRequest) (*AddPermissionResponse, error)
	Remove(context.Context, *RemovePermissionRequest) (*RemovePermissionResponse, error)
	mustEmbedUnimplementedPermissionsServer()
}

// UnimplementedPermissionsServer must be embedded to have forward compatible implementations.
type UnimplementedPermissionsServer struct {
}

func (UnimplementedPermissionsServer) Create(context.Context, *CreatePermissionRequest) (*CreatePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPermissionsServer) ReadOwners(context.Context, *ReadPermissionOwnersRequest) (*ReadPermissionOwnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOwners not implemented")
}
func (UnimplementedPermissionsServer) CheckPermissions(context.Context, *CheckPermissionsRequest) (*CheckPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermissions not implemented")
}
func (UnimplementedPermissionsServer) Delete(context.Context, *DeletePermissionRequest) (*DeletePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPermissionsServer) Add(context.Context, *AddPermissionRequest) (*AddPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedPermissionsServer) Remove(context.Context, *RemovePermissionRequest) (*RemovePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedPermissionsServer) mustEmbedUnimplementedPermissionsServer() {}

// UnsafePermissionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionsServer will
// result in compilation errors.
type UnsafePermissionsServer interface {
	mustEmbedUnimplementedPermissionsServer()
}

func RegisterPermissionsServer(s grpc.ServiceRegistrar, srv PermissionsServer) {
	s.RegisterService(&Permissions_ServiceDesc, srv)
}

func _Permissions_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acs.Permissions/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionsServer).Create(ctx, req.(*CreatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permissions_ReadOwners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPermissionOwnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionsServer).ReadOwners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acs.Permissions/ReadOwners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionsServer).ReadOwners(ctx, req.(*ReadPermissionOwnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permissions_CheckPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionsServer).CheckPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acs.Permissions/CheckPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionsServer).CheckPermissions(ctx, req.(*CheckPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permissions_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acs.Permissions/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionsServer).Delete(ctx, req.(*DeletePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permissions_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionsServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acs.Permissions/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionsServer).Add(ctx, req.(*AddPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permissions_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionsServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acs.Permissions/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionsServer).Remove(ctx, req.(*RemovePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Permissions_ServiceDesc is the grpc.ServiceDesc for Permissions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Permissions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "acs.Permissions",
	HandlerType: (*PermissionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Permissions_Create_Handler,
		},
		{
			MethodName: "ReadOwners",
			Handler:    _Permissions_ReadOwners_Handler,
		},
		{
			MethodName: "CheckPermissions",
			Handler:    _Permissions_CheckPermissions_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Permissions_Delete_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Permissions_Add_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Permissions_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acs/permissions.proto",
}
